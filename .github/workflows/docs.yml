name: Deploy MkDocs to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        pip install mkdocstrings mkdocstrings-python
        
    - name: Setup Go for quality metrics
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Install quality tools
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install golang.org/x/tools/cmd/cover@latest
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.2
        
    - name: Generate quality reports
      run: |
        # Create reports directory
        mkdir -p reports docs/quality
        
        # Run tests with coverage
        go test ./... -coverprofile=reports/coverage.out -covermode=atomic || true
        
        # Generate coverage reports
        if [ -f "reports/coverage.out" ]; then
          go tool cover -func=reports/coverage.out > reports/coverage_detailed.txt
          go tool cover -html=reports/coverage.out -o reports/coverage.html
          COVERAGE=$(go tool cover -func=reports/coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
        else
          COVERAGE=0
          touch reports/coverage.out reports/coverage_detailed.txt
          echo "<html><body>No coverage data available</body></html>" > reports/coverage.html
        fi
        
        # Run complexity analysis
        gocyclo -over 10 . > reports/complexity.txt || true
        gocyclo . > reports/complexity_all.txt || true
        
        # Run linting
        golangci-lint run --out-format=json > reports/lint.json || true
        golangci-lint run > reports/lint.txt || true
        
        # Measure build time
        BUILD_START=$(date +%s.%N)
        go build -o reports/cdevents-cli . || true
        BUILD_END=$(date +%s.%N)
        BUILD_TIME=$(echo "$BUILD_END - $BUILD_START" | bc -l 2>/dev/null || echo "0")
        
        # Get binary size
        if [ -f "reports/cdevents-cli" ]; then
          BINARY_SIZE=$(du -h reports/cdevents-cli | cut -f1)
        else
          BINARY_SIZE="0B"
        fi
        
        # Measure test time
        TEST_START=$(date +%s.%N)
        go test ./... -short > /dev/null 2>&1 || true
        TEST_END=$(date +%s.%N)
        TEST_TIME=$(echo "$TEST_END - $TEST_START" | bc -l 2>/dev/null || echo "0")
        
        # Generate quality report
        cat > reports/quality_report.md << EOF
        # Code Quality Report
        
        ## Coverage Analysis
        - **Overall Coverage**: ${COVERAGE}%
        - **Threshold**: 70%
        - **Status**: $(if (( $(echo "$COVERAGE >= 70" | bc -l 2>/dev/null || echo "0") )); then echo "✅ PASS"; else echo "⚠️ BELOW THRESHOLD"; fi)
        
        ## Performance Metrics
        - **Build Time**: ${BUILD_TIME}s
        - **Binary Size**: ${BINARY_SIZE}
        - **Test Execution Time**: ${TEST_TIME}s
        
        ## Complexity Analysis
        - **High Complexity Functions**: $(wc -l < reports/complexity.txt) functions > 10 complexity
        - **Status**: $(if [ -s "reports/complexity.txt" ]; then echo "⚠️ REVIEW NEEDED"; else echo "✅ GOOD"; fi)
        
        ## Linting Results
        - **Status**: $(if [ -s "reports/lint.txt" ]; then echo "⚠️ ISSUES FOUND"; else echo "✅ CLEAN"; fi)
        
        ## Files Generated
        - \`coverage.out\` - Coverage profile
        - \`coverage.html\` - HTML coverage report
        - \`complexity.txt\` - High complexity functions
        - \`lint.txt\` - Linting results
        
        ## Coverage by Package
        EOF
        
        # Add package coverage details
        if [ -f "reports/coverage.out" ]; then
          go tool cover -func=reports/coverage.out | grep -E "(\.go:.*%)" | head -10 >> reports/quality_report.md || true
        fi
        
        # Create detailed quality documentation
        cat > docs/quality/QUALITY_REPORT.md << DOCEOF
        # Quality Report
        
        > This report is automatically generated by the CI/CD pipeline.
        > Last updated: $(date)
        
        $(cat reports/quality_report.md)
        
        ## How to Generate This Report
        
        This report can be regenerated using:
        
        \`\`\`bash
        # Using Make (recommended)
        make quality-docker
        
        # Or using Docker directly
        docker build -f Dockerfile.quality -t cdevents-cli-quality .
        docker run --rm -v \$(pwd)/reports:/app/reports cdevents-cli-quality
        \`\`\`
        
        ## Viewing Reports
        
        ### Coverage Report
        [View Interactive Coverage Report](coverage.html)
        
        ### Build Information
        - **Build Time**: ${BUILD_TIME}s
        - **Binary Size**: ${BINARY_SIZE}
        - **Test Time**: ${TEST_TIME}s
        - **Coverage**: ${COVERAGE}%
        DOCEOF
        
        # Copy coverage HTML to docs
        cp reports/coverage.html docs/quality/ || true
        
        # Create additional quality documentation files
        cat > docs/quality/coverage-summary.md << COVEOF
        # Coverage Summary
        
        > Last updated: $(date)
        
        ## Overall Coverage: ${COVERAGE}%
        
        ### Coverage Threshold
        - **Target**: 70%
        - **Current**: ${COVERAGE}%
        - **Status**: $(if (( $(echo "$COVERAGE >= 70" | bc -l 2>/dev/null || echo "0") )); then echo "✅ PASS"; else echo "⚠️ BELOW THRESHOLD"; fi)
        
        ### View Interactive Report
        [Open Coverage Report](coverage.html)
        COVEOF
        
        echo "Quality reports generated successfully"
        
    - name: Build MkDocs
      run: |
        mkdocs build --verbose
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./site
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
